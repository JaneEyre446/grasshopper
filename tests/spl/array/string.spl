include "byte_array.spl";


procedure equals(first: Array<Byte>, second: Array<Byte>)
  returns (res: Bool)
  requires byte_array(first) &+& byte_array(second)
  ensures byte_array(first) &+& byte_array(second)
  ensures res == (first.length == second.length && (forall i: Int:: 0 <= i && i < first.length ==> first[i] == second[i]))
{
  if(first.length != second.length)
    return false;
  var i := 0;
  //pure assume first.length < 256*256;
  while(i < first.length && first[i] == second[i])
    //invariant first.length < 256*256
    invariant byte_array(first) &+& byte_array(second)
    invariant 0 <= i && i <= first.length && first.length == second.length
    invariant forall j: Int:: 0 <= j && j < i ==> first[j] == second[j]
  {
    i := i + 1;
  }
  if (i >= first.length) return true;
  else return false;
}


//inspired from http://en.wikibooks.org/wiki/C_Programming/Strings#The_strcmp_function
procedure strcmp(s1: Array<Byte>, s2: Array<Byte>)
  returns (res: Int)
  requires byte_array(s1) &+& byte_array(s2)
  ensures byte_array(s1) &+& byte_array(s2)
  ensures (res == 0) == (s1.length == s2.length && (forall i: Int:: 0 <= i && i < s1.length ==> s1[i] == s2[i]))
{
  var i := 0; 
  /* Move s1 and s2 to the s1 differing characters in each string,
     or the ends of the strings if they are identical.  */
  //pure assume s1.length < 256*256;
  while (i < s1.length && i < s2.length && s1[i] == s2[i])
    //invariant s1.length < 256*256
    invariant byte_array(s1) &+& byte_array(s2)
    invariant 0 <= i && i <= s1.length && i <= s2.length
    invariant forall j: Int:: 0 <= j && j < i ==> s1[j] == s2[j]
  {
    i := i + 1;
  }

  if (i >= s1.length && i >= s2.length)
    return 0;
  else if (i >= s1.length)
    return -1;
  else if (i >= s2.length)
    return 1;
  else if (s1[i] < s2[i])
    return -1;
  else
    return 1;
}
                 
procedure strdup(str: Array<Byte>)
  returns (res: Array<Byte>)
  requires byte_array(str)
  ensures byte_array(str) &*& byte_array(res)
  ensures str.length == res.length
  ensures forall i: Int:: 0 <= i && i < str.length ==> str[i] == res[i]
{
  var copy := new Array<Byte>(str.length);
  var i := 0;
  //pure assume str.length < 256*256;
  while(i < str.length)
    //invariant str.length < 256*256
    invariant byte_array(str) &*& byte_array(copy)
    invariant 0 <= i && i <= str.length && str.length == copy.length
    invariant forall j: Int:: 0 <= j && j < i ==> str[j] == copy[j]
  {
    copy[i] := str[i];
    i := i + 1;
  }
  return copy;
}
