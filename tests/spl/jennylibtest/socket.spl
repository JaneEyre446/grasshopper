include "../array/byte_array.spl";

///////////////
// Constants //
///////////////

//using this requires adding "#include <netinet/in.h>" to the generated C file

PF_INET: Int
PF_INET6: Int

SOCK_DGRAM: Int
SOCK_STREAM: Int

IPPROTO_TCP: Int
IPPROTO_UDP: Int


////////////
// Struct //
////////////

struct SocketAddressIP4 {
  //var sin4_family: Int; = AF_INET
  var sin4_port: Int;
  var sin4_addr: Int;
  //var sin4_addr_lower: Int;
  //var sin4_addr_upper: Int;
}

struct SocketAddressIP6 {
  //var sin6_family: Int; = AF_INET6
  var sin6_port: Int;
  var sin6_flowinfo: Int;
  var sin6_addr: Array<Byte>; //should be 16 Bytes
  var sin6_scope_id: Int;
}

////////////////
// Predicates //
////////////////

predicate socket_addr_4( address: SocketAddressIP4)(FP: Set<SocketAddressIP4>) {
  FP == Set<SocketAddressIP4>(address) &&
  address.sin4_port >= 0 &&
  address.sin4_port < 65536 
}

predicate socket_addr_6( address: SocketAddressIP6)(FP0: Set<SocketAddressIP6>, FP1: Set<Array<Byte>>, FP2: Set<ArrayCell<Byte>>) {
  FP0 == Set<SocketAddressIP6>(address) &&
  FP1 == Set<Array<Byte>>(address.sin6_addr) &&
  byte_arrayseg(address.sin6_addr, 0, address.sin6_addr.length, FP2) &&
  address.sin6_addr.length == 16 &&
  address.sin6_port >= 0 &&
  address.sin6_port < 65536 
}

////////////////
// Procedures //
////////////////

procedure get_address4(node: Array<Byte>, service: Array<Byte>) returns (address: SocketAddressIP4)
  requires (node == null || byte_array(node)) &*& byte_array(service)
  ensures  (node == null || byte_array(node)) &*& byte_array(service)
  ensures  node == old(node)
  ensures  address == null || socket_addr_4(address)

procedure get_address6(node: Array<Byte>, service: Array<Byte>) returns (address: SocketAddressIP6)
  requires (node == null || byte_array(node)) &*& byte_array(service)
  ensures  (node == null || byte_array(node)) &*& byte_array(service)
  ensures  node == old(node)
  ensures  address == null || socket_addr_6(address)

procedure create_socket(inet_type: Int, socket_type: Int, protocol: Int) returns (fd: Int)
  requires inet_type == PF_INET || inet_type == PF_INET6
  requires (socket_type == SOCK_STREAM && protocol == IPPROTO_TCP) || (socket_type == SOCK_DGRAM && protocol == IPPROTO_UDP)
  ensures fd >= -1

procedure bind4(fd: Int, address: SocketAddressIP4) returns (success: Bool)
  requires fd >= 0
  requires socket_addr_4(address)
  ensures  socket_addr_4(address)
  ensures  address == old(address) && address.sin4_port == old(address.sin4_port)
  ensures  address.sin4_addr == old(address.sin4_addr)

procedure bind6(fd: Int, address: SocketAddressIP6) returns (success: Bool)
  requires fd >= 0
  requires socket_addr_6(address)
  ensures  socket_addr_6(address)
  ensures  address == old(address)
  ensures  address.sin6_port == old(address.sin6_port)
  ensures  address.sin6_flowinfo == old(address.sin6_flowinfo)
  ensures  address.sin6_scope_id == old(address.sin6_scope_id)
  ensures  forall i: Int:: i >= 0 && i < 16 ==> address.sin6_addr[i] == old(address.sin6_addr[i])


/////////////////
// UDP methods //
/////////////////

procedure udp_send4(fd: Int, msg: Array<Byte>, len: Int, address: SocketAddressIP4) returns (byteCount: Int)
  requires fd >= 0
  requires socket_addr_4(address)
  requires byte_array(msg)
  requires msg.length <= len
  ensures  socket_addr_4(address)
  ensures  address == old(address) && address.sin4_port == old(address.sin4_port)
  ensures  address.sin4_addr == old(address.sin4_addr)
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1

procedure udp_send6(fd: Int, msg: Array<Byte>, len: Int, address: SocketAddressIP6) returns (byteCount: Int)
  requires fd >= 0
  requires socket_addr_6(address)
  requires byte_array(msg)
  requires msg.length <= len
  ensures  socket_addr_6(address)
  ensures  address == old(address)
  ensures  address.sin6_port == old(address.sin6_port)
  ensures  address.sin6_flowinfo == old(address.sin6_flowinfo)
  ensures  address.sin6_scope_id == old(address.sin6_scope_id)
  ensures  forall i: Int:: i >= 0 && i < 16 ==> address.sin6_addr[i] == old(address.sin6_addr[i])
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1


procedure udp_recv4(fd: Int, msg: Array<Byte>, from: SocketAddressIP4) returns (byteCount: Int)
  requires fd >= 0
  requires socket_addr_4(from)
  requires byte_array(msg)
  ensures  socket_addr_4(from)
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1

procedure udp_recv6(fd: Int, msg: Array<Byte>, from: SocketAddressIP6) returns (byteCount: Int)
  requires fd >= 0
  requires socket_addr_6(from)
  requires byte_array(msg)
  ensures  socket_addr_6(from)
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1


/////////////////
// TCP methods //
/////////////////

procedure glisten(fd: Int, backlog: Int) returns (success: Bool)
  requires fd >= 0
  requires backlog >= 0


procedure accept4(fd: Int, address: SocketAddressIP4) returns (acceptedFd: Int)
  requires fd >= 0
  requires socket_addr_4(address)
  ensures  acceptedFd >= -1
  ensures  socket_addr_4(address)

procedure accept6(fd: Int, address: SocketAddressIP6) returns (acceptedFd: Int)
  requires fd >= 0
  requires socket_addr_6(address)
  ensures  acceptedFd >= -1
  ensures  socket_addr_6(address)


procedure connect4(fd: Int, address: SocketAddressIP4) returns (success: Bool)
  requires fd >= 0
  requires socket_addr_4(address)
  ensures  socket_addr_4(address)
  ensures  address == old(address) && address.sin4_port == old(address.sin4_port)
  ensures  address.sin4_addr == old(address.sin4_addr)

procedure connect6(fd: Int, address: SocketAddressIP6) returns (success: Bool)
  requires fd >= 0
  requires socket_addr_6(address)
  ensures  socket_addr_6(address)
  ensures  address == old(address)
  ensures  address.sin6_port == old(address.sin6_port)
  ensures  address.sin6_flowinfo == old(address.sin6_flowinfo)
  ensures  address.sin6_scope_id == old(address.sin6_scope_id)
  ensures  forall i: Int:: i >= 0 && i < 16 ==> address.sin6_addr[i] == old(address.sin6_addr[i])


procedure tcp_send(fd: Int, msg: Array<Byte>, len: Int) returns (byteCount: Int)
  requires fd >= 0
  requires byte_array(msg)
  requires msg.length <= len
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1


procedure tcp_recv(fd: Int, msg: Array<Byte>) returns (byteCount: Int)
  requires fd >= 0
  requires byte_array(msg)
  ensures  byte_array(msg)
  ensures  msg == old(msg)
  ensures  msg.length == old(msg.length)
  ensures  byteCount <= msg.length
  ensures  byteCount >= -1

